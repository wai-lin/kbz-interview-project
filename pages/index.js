import React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import Cookies from "js-cookie";
import { useMutation } from "react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  Grid,
  Box,
  Stack,
  Heading,
  FormControl,
  FormLabel,
  FormErrorMessage,
  FormHelperText,
  Input,
  Button,
  AlertDialog,
  AlertDialogBody,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogContent,
  AlertDialogOverlay,
} from "@chakra-ui/react";

import { getAuth, isAdminLoggedIn, isUserLoggedIn } from "../lib/authHelper";

const loginSchema = z.object({
  email: z
    .string()
    .email({ message: "Incorrect email format." })
    .min(1, { message: "Email is required." }),
  password: z.string().min(3, { message: "Must be at least 3 characters." }),
});

export async function getServerSideProps({ req }) {
  const { isAdmin, isAuth } = getAuth(req.cookies);
  return {
    props: { isAdmin, isAuth },
  };
}

export default function Home(props) {
  const router = useRouter();

  React.useEffect(() => {
    if (isAdminLoggedIn(props)) router.replace("/admin/dashboard");
    if (isUserLoggedIn(props)) router.replace("/leave");
  }, [props, router]);

  const [isOpen, setIsOpen] = React.useState(false);
  const onClose = () => setIsOpen(false);
  const cancelRef = React.useRef();

  const { handleSubmit, register, formState, reset } = useForm({
    resolver: zodResolver(loginSchema),
  });

  const login = useMutation((user) =>
    fetch("/api/auth", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
      },
      body: JSON.stringify(user),
    }).then((res) => res.json())
  );

  const submitHandler = (user) => {
    login
      .mutateAsync(user)
      .then(({ data, success }) => {
        if (success === false) setIsOpen(true);
        if (data) {
          Cookies.set("auth", JSON.stringify(data), { expires: 7 });
          if (data.email === "admin@gmail.com") router.push("/admin/dashboard");
          else router.push("/leave");
        }
      })
      .catch(() => setIsOpen(true));
  };

  return (
    <>
      <Head>
        <title>Employee Leave Form WebApp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Grid placeItems="center" h="100vh">
        <Box
          as="form"
          w={{ sm: "90%", md: "50%", lg: "30%" }}
          px="6"
          py="4"
          border="1px"
          borderColor="gray.100"
          rounded="base"
          onSubmit={handleSubmit((user) => submitHandler(user))}
        >
          <Heading as="h3" size="lg" textAlign="center">
            Employee Leave Form WebApp
          </Heading>

          <Stack direction="column" spacing="4">
            <FormControl
              id="email"
              isInvalid={formState.errors?.email?.message}
            >
              <FormLabel>Email</FormLabel>
              <FormHelperText>eg. harry@gmail.com</FormHelperText>
              <Input type="email" {...register("email")} />
              <FormErrorMessage>
                {formState.errors?.email?.message || ""}
              </FormErrorMessage>
            </FormControl>

            <FormControl
              id="password"
              isInvalid={formState.errors?.password?.message}
            >
              <FormLabel>Password</FormLabel>
              <FormHelperText>Your secure password.</FormHelperText>
              <Input type="password" {...register("password")} />
              <FormErrorMessage>
                {formState.errors?.password?.message || ""}
              </FormErrorMessage>
            </FormControl>

            <Grid placeItems="center">
              <Button type="submit" isLoading={login.isLoading}>
                Login
              </Button>
            </Grid>
          </Stack>
        </Box>
      </Grid>

      <AlertDialog
        isOpen={isOpen}
        leastDestructiveRef={cancelRef}
        onClose={onClose}
      >
        <AlertDialogOverlay>
          <AlertDialogContent>
            <AlertDialogHeader fontSize="lg" fontWeight="bold">
              Login Error
            </AlertDialogHeader>

            <AlertDialogBody>{login.data?.message}</AlertDialogBody>

            <AlertDialogFooter>
              <Button ref={cancelRef} onClick={onClose}>
                OK
              </Button>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialogOverlay>
      </AlertDialog>
    </>
  );
}
